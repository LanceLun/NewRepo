namespace Homework
{
	internal class Program
	{
		static void Main(string[] args)
		{
			Estore estore = new Estore();
			Invoice invoice = estore.IssueInvoice(100);
			string test=Invoice.IssueInvoiceResult(invoice);
			Console.WriteLine(test);

		}
	}
}

namespace Lance.OOP.Study
{

	public class Invoice
    {

		public int Price { get;private set; }
        public int Tax { get; private set; }
        public int InclusivePrice { get;private set; }

		public Invoice(int price,int tax,double taxRate = 0.05)
        {
		
            this.Price = price;
            this.Tax =tax;
            if (price >= 0) { InclusivePrice = Tax + Price; }
            else { InclusivePrice = Price - Tax; }
		}
        public bool IsBuy ()
        {
			return Price>=0;
        }
        private string Buy() 
        {
            return  $"未稅金額：{Price}\n營業稅：{Tax}\n含稅價：{InclusivePrice}";
		}
        private string Return()
        {
			return $"未稅金額：{InclusivePrice}\n營業稅：{Tax}\n含稅價：{Price}";
		}
		public static string IssueInvoiceResult(Invoice invoice)
		{
			return invoice.IsBuy() ? invoice.Buy() : invoice.Return();
		}



	}

	public class Estore
	{
		private double _taxRate;
		public Estore(double taxRate = 0.05)
		{
			if (taxRate < 0) { throw new Exception("稅率不得低於0%"); }
			if (taxRate >= 1) { throw new Exception("稅率不得高於100%"); }
			this._taxRate = taxRate;
		}
		private int calcTax(int price)
		{
			return (int)(price * _taxRate);
		}
		private int taxRefund(int price)
		{
			return (int)(price - price / (1 + _taxRate));
		}

		public Invoice IssueInvoice(int price)
		{
			if (price >= 0) 
			{
				int tax = calcTax(price);
				return new Invoice(price, tax);
			}
			else 
			{
				int tax = taxRefund(price);
				return new Invoice(price, tax);
			}
			
		}
	}
}
